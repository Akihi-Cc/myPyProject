# !/usr/local/bin/python3.12
# Python3 数据类型转换
# 有时候，我们需要对数据内置的类型进行转换，数据类型的转换，一般情况下你只需要将数据类型作为函数名即可。
# Python 数据类型转换可以分为两种：
# 隐式类型转换 - 自动完成
# 显式类型转换 - 需要使用类型函数来转换
print("*******************************************【1】 隐式类型转换 *******************************************")
# 在隐式类型转换中，Python 会自动将一种数据类型转换为另一种数据类型，不需要我们去干预。
# 以下实例中，我们对两种不同类型的数据进行运算，较低数据类型（整数）就会转换为较高数据类型（浮点数）以避免数据丢失。
num_int = 123
num_flo = 1.23

num_new = num_int + num_flo

print("num_int 数据类型为:", type(num_int))
print("num_flo 数据类型为:", type(num_flo))

print("num_new 值为:", num_new)
print("num_new 数据类型为:", type(num_new))

# 代码解析：

# 实例中我们对两个不同数据类型的变量 num_int 和 num_flo 进行相加运算，并存储在变量 num_new 中。
# 然后查看三个变量的数据类型。
# 在输出结果中，我们看到 num_int 是 整型（integer） ， num_flo 是 浮点型（float）。
# 同样，新的变量 num_new 是 浮点型（float），这是因为 Python 会将较小的数据类型转换为较大的数据类型，以避免数据丢失。
# 我们再看一个实例，整型数据与字符串类型的数据进行相加：
num_int = 123
num_str = "456"

print("num_int 数据类型为:", type(num_int))
print("num_str 数据类型为:", type(num_str))

# print(num_int + num_str)  # 异常 TypeError: unsupported operand type(s) for +: 'int' and 'str'
# 从输出中可以看出，整型和字符串类型运算结果会报错，输出 TypeError。 Python 在这种情况下无法使用隐式转换。
# 但是，Python 为这些类型的情况提供了一种解决方案，称为显式转换。

print("*******************************************【2】 显式类型转换 *******************************************")
# 在显式类型转换中，用户将对象的数据类型转换为所需的数据类型。 我们使用 int()、float()、str() 等预定义函数来执行显式类型转换。
# int() 强制转换为整型：
x = int(1)  # x 输出结果为 1
y = int(2.8)  # y 输出结果为 2
z = int("3")  # z 输出结果为 3
# float() 强制转换为浮点型：
x = float(1)  # x 输出结果为 1.0
y = float(2.8)  # y 输出结果为 2.8
z = float("3")  # z 输出结果为 3.0
w = float("4.2")  # w 输出结果为 4.2
# str() 强制转换为字符串类型：
x = str("s1")  # x 输出结果为 's1'
y = str(2)  # y 输出结果为 '2'
z = str(3.0)  # z 输出结果为 '3.0'
# 整型和字符串类型进行运算，就可以用强制类型转换来完成：
num_int = 123
num_str = "456"

print("num_int 数据类型为:", type(num_int))
print("类型转换前，num_str 数据类型为:", type(num_str))

num_str = int(num_str)  # 强制转换为整型
print("类型转换后，num_str 数据类型为:", type(num_str))

num_sum = num_int + num_str

print("num_int 与 num_str 相加结果为:", num_sum)
print("sum 数据类型为:", type(num_sum))

# 以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。
# 函数	                    描述
# int(x [,base])            将x转换为一个整数
# float(x)                  将x转换到一个浮点数
# complex(real [,imag])     创建一个复数
# str(x)                    将对象 x 转换为字符串
# repr(x)                   将对象 x 转换为表达式字符串
# eval(str)                 用来计算在字符串中的有效Python表达式,并返回一个对象
# tuple(s)                  将序列 s 转换为一个元组
# list(s)                   将序列 s 转换为一个列表
# set(s)                    转换为可变集合
# dict(d)                   创建一个字典。d 必须是一个 (key, value)元组序列。
# frozenset(s)              转换为不可变集合
# chr(x)                    将一个整数转换为一个字符
# ord(x)                    将一个字符转换为它的整数值
# hex(x)                    将一个整数转换为一个十六进制字符串
# oct(x)                    将一个整数转换为一个八进制字符串

print("*******************************************【3】 笔记 *******************************************")

# 数据类型的高低之分：
# "较高数据类型"和"较低数据类型"是在隐式类型转换中用于描述数据精度的概念。精度可以理解为数据类型能够表示的信息量或详细程度。在Python中，数据类型的"高"和"低"主要根据它们的精度来判断。
# 这里的"较高"数据类型指的是能够表示更多信息（或更精确信息）的数据类型，而"较低"的数据类型则表示的信息较少。具体来说，比如浮点数就比整数"高"，因为浮点数不仅可以表示整数，还可以表示小数。所以在你的例子中，整数就会被自动转换为浮点数，以保证信息不丢失。
# 再比如，复数（complex）就比浮点数（float）和整数（int）"高"，因为复数可以表示实数和虚数，而浮点数和整数只能表示实数。所以在进行运算时，如果操作数包含复数，那么其他的浮点数或整数就会被转换为复数。
# 通常情况下，Python的数据类型的"高低"可以按照如下顺序理解：布尔（bool）< 整型（int） < 浮点型（float）< 复数（complex）。这个顺序主要根据数据类型可以表示的信息范围和精度来确定的。
# 不同数据类型之间能否随意转化：
# 虽然Python提供了一些内置的函数来实现不同数据类型之间的转换，如int(), float(), str(), list(), tuple(), set()等等，但并非所有类型的数据都可以被转换成其他任意类型。
# 转换是否可行，主要取决于数据本身是否包含足够的信息来表示目标类型。
# 例如：
# 你可以轻松地将整数转换为字符串，因为每一个整数都有一个明确的字符串表示（例如，整数123可以表示为字符串"123"）。 然而： 对于一个非数字字符串（如"Hello"），它无法被转换为一个整数或浮点数，
# 因为这个字符串并不包含任何可以表示一个数字的信息。
# 总的来说，数据类型的转换并非无限制，它取决于原始数据是否能够提供足够的信息来表示目标类型。当你在编程中进行类型转换时，需要注意这一点。
