# !/usr/local/bin/python3.12
# Python3 编程第一步
# 在前面的教程中我们已经学习了一些 Python3 的基本语法知识，接下来我们来尝试一些实例。
# 打印字符串:
print("Hello, world!")

# 输出变量值:
i = 256 * 256
print('i 的值为：', i)

# 定义变量并进行简单的数学运算
x = 3
y = 2
z = x + y
print(z)

# 定义一个列表并打印出其中的元素：
my_list = ['google', 'runoob', 'taobao']
print(my_list[0])  # 输出 "google"
print(my_list[1])  # 输出 "runoob"
print(my_list[2])  # 输出 "taobao"

# 使用 for 循环打印数字 0 到 4:
for i in range(5):
    print(i)

# 根据条件输出不同的结果:
x = 6
if x > 10:
    print("x 大于 10")
else:
    print("x 小于或等于 10")

# 下面我们尝试来写一个斐波纳契数列。
# 斐波那契数列是一个经典的数学问题，其中每个数字是前两个数字之和。
# Fibonacci series: 斐波纳契数列
# 两个元素的总和确定了下一个数
a, b = 0, 1
while b < 10:
    print(b)
    a, b = b, a + b
# 其中代码 a, b = b, a+b 的计算方式为先计算右边表达式，然后同时赋值给左边，等价于：
# n=b
# m=a+b
# a=n
# b=m

# 这个例子介绍了几个新特征。
# 第一行包含了一个复合赋值：变量 a 和 b 同时得到新值 0 和 1。最后一行再次使用了同样的方法，可以看到，右边的表达式会在赋值变动之前执行。右边表达式的执行顺序是从左往右的。
# 也可以使用 for 循环来实现：
n = 10
a, b = 0, 1
for i in range(n):
    print(b)
    a, b = b, a + b

print("【1】 end 关键字 *******************************************")
# 关键字end可以用于将结果输出到同一行，或者在输出的末尾添加不同的字符，实例如下：
# Fibonacci series: 斐波纳契数列
# 两个元素的总和确定了下一个数
a, b = 0, 1
while b < 1000:
    print(b, end=',')
    a, b = b, a + b

print("【2】 笔记 *******************************************")
# print() sep 参数使用：
a = 10;
b = 388;
c = 98
print(a, b, c, sep='@')


# 看了一下，目前还没有把递归单独拿出来讲解
# 下面使用递归方式求斐波纳契数列
# 其实递归就是函数内部调用自身。
# 使用 print(fab(num)) #num 是一个数字,可用递归方式求输入数字的斐波纳契结果

def fab(n):
    if n < 1:
        print('输入有误！')
        return -1
    if n == 1 or n == 2:
        return 1
    else:
        return fab(n - 1) + fab(n - 2)

# 楼上说用递归的，单纯说递归还好，其实递归在很大程度上牺牲了空间换取了可读性。每次调用递归函数的时候都会创建一个函数栈，如果递归深度过大，
# 则会造成溢出状况。原文中使用a,b = b,a+b 方法求斐波那契数列，占用空间少，来回只有两个变量的空间占用，很方便。
#
