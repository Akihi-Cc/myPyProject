# !/usr/local/bin/python3.12
# Python3 元组
# Python 的元组与列表类似，不同之处在于元组的元素不能修改。
# 元组使用小括号 ( )，列表使用方括号 [ ]。
# 元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。
tup1 = ('Google', 'Runoob', 1997, 2000)
tup2 = (1, 2, 3, 4, 5)
tup3 = "a", "b", "c", "d"  # 不需要括号也可以
print(type(tup3))

# 创建空元组
tup1 = ()

# 元组中只包含一个元素时，需要在元素后面添加逗号 , ，否则括号会被当作运算符使用：
tup1 = (50)
print(type(tup1))  # 不加逗号，类型为整型
tup1 = (50,)
print(type(tup1))  # 加上逗号，类型为元组
# 元组与字符串类似，下标索引从 0 开始，可以进行截取，组合等。

print("*******************************************【1】访问元组 *******************************************")
# 元组可以使用下标索引来访问元组中的值，如下实例:
tup1 = ('Google', 'Runoob', 1997, 2000)
tup2 = (1, 2, 3, 4, 5, 6, 7)
print("tup1[0]: ", tup1[0])
print("tup2[1:5]: ", tup2[1:5])

print("*******************************************【2】修改元组 *******************************************")
# 元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:
tup1 = (12, 34.56)
tup2 = ('abc', 'xyz')

# 以下修改元组元素操作是非法的。
# tup1[0] = 100
# 创建一个新的元组
tup3 = tup1 + tup2
print(tup3)

print("*******************************************【3】删除元组 *******************************************")
# 元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:
tup = ('Google', 'Runoob', 1997, 2000)

print(tup)
del tup
print("删除后的元组 tup : ")
# print(tup)  # 异常 NameError: name 'tup' is not defined

print("*******************************************【4】元组运算符 *******************************************")
# 与字符串一样，元组之间可以使用 +、+=和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。
# Python 表达式	                结果	        描述

# 计算元素个数
len((1, 2, 3))

# 连接，c 就是一个新的元组，它包含了 a 和 b 中的所有元素。
a = (1, 2, 3)
b = (4, 5, 6)
c = a + b
print(c)

# 连接，a 就变成了一个新的元组，它包含了 a 和 b 中的所有元素。
a = (1, 2, 3)
b = (4, 5, 6)
a += b
print(a)

# 复制
('Hi!',) * 4

# 元素是否存在
3 in (1, 2, 3)

# 迭代
for x in (1, 2, 3):
    print(x, end=" ")

print("*******************************************【5】元组索引，截取 *******************************************")
# 因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素，如下所示：
# 元组：
tup = ('Google', 'Runoob', 'Taobao', 'Wiki', 'Weibo', 'Weixin')
# Python 表达式	        结果	                                            描述
# tup[1]	            'Runoob'	                                        读取第二个元素
# tup[-2]	            'Weibo'	                                            反向读取，读取倒数第二个元素
# tup[1:]	            ('Runoob', 'Taobao', 'Wiki', 'Weibo', 'Weixin')	    截取元素，从第二个开始后的所有元素。
# tup[1:4]	            ('Runoob', 'Taobao', 'Wiki')	                    截取元素，从第二个开始到第四个元素（索引为 3）。
tup = ('Google', 'Runoob', 'Taobao', 'Wiki', 'Weibo', 'Weixin')
print(tup[1])
print(tup[-2])
print(tup[1:])
print(tup[1:4])

print("*******************************************【6】元组内置函数 *******************************************")
# 方法                      说明
# len(tuple)                计算元组元素个数。
# max(tuple)                返回元组中元素最大值。
# min(tuple)                返回元组中元素最小值。
# tuple(iterable)           将可迭代系列转换为元组。

# 关于元组是不可变的
# 所谓元组的不可变指的是元组所指向的内存中的内容不可变。
tup = ('r', 'u', 'n', 'o', 'o', 'b')
# tup[0] = 'g'  # 异常 TypeError: 'tuple' object does not support item assignment
print(id(tup))  # 查看内存地址
tup = (1, 2, 3)
print(id(tup))
# 从以上实例可以看出，重新赋值的元组 tup，绑定到新的对象了，不是修改了原来的对象。

# tuple和list非常类似，但是tuple一旦初始化就不能修改
# 这个tuple定义的时候有3个元素，分别是'a'，'b'和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？
# 别急，我们先看看定义的时候tuple包含的3个元素：当我们把list的元素'A'和'B'修改为'X'和'Y'后，tuple变为：表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。
# tuple一开始指向的list并没有改成别的list，所以，tuple所谓的"不变"是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，
# 但指向的这个list本身是可变的！理解了"指向不变"后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。
